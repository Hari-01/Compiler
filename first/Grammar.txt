<program’> <program> $
<program> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> <moduleDeclaration> <moduleDeclarations>
<moduleDeclarations> ε
<moduleDeclaration> DECLARE MODULE ID SEMICOL 
<otherModules> <module> <otherModules>
<otherModules> ε
<driverModule> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> ε
<input_plist> ID COLON <dataType> <new_input_plist>
<new_input_plist> COMMA ID COLON <dataType> <new_input_plist>
<new_input_plist> ε
<output_plist> ID COLON <dataType> <new_output_plist>
<new_output_plist> COMMA ID COLON <dataType> <new_output_plist>
<new_output_plist> ε
<dataType> INTEGER
<dataType> REAL
<dataType> BOOLEAN
<dataType> ARRAY SQBO <range> SQBC OF <type>
<type> INTEGER
<type> REAL
<type> BOOLEAN
<moduleDef> START <statements> END
<statements> <statement> <statements>
<statements> ε
<statement> <ioStmt>
<statement> <simpleStmt>
<statement> <declareStmt>
<statement> <condionalStmt>
<statement> <iterativeStmt> 
<ioStmt> GET_VALUE BO ID BC SEMICOL
<ioStmt> PRINT BO <varAndBool> BC SEMICOL
<var> ID <whichId>
<var> NUM
<var> RNUM 
<bool> TRUE
<bool> FALSE
<varAndBool> <var>
<varAndBool> <bool>
<whichId> SQBO ID SQBC
<whichId> ε
<simpleStmt> <assignmentStmt>
<simpleStmt> <moduleReuseStmt>
<assignmentStmt> ID <whichStmt>
<whichStmt> <lvalueIDStmt>
<whichStmt> <lvalueARRStmt>
<lvalueIDStmt> ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index> NUM
<index> ID
<moduleReuseStmt> <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> SQBO <idList> SQBC ASSIGNOP
<optional> ε
<idList> ID <idList’>
<idList’> COMMA ID <idList’>
<idList’> ε
<expression> PLUS <expression’>
<expression> MINUS <expression’>
<expression> <boolConjunctArithmetic>
<expression’> <var>
<expression’> BO <arithmeticExpr> BC
<factor’> <bool>
<boolConjunctArithmetic> <factor’> <boolConjunctArithmetic’>
<boolConjunctArithmetic’> <logicalOp> <factor’> <boolConjunctArithmetic’>
<boolConjunctArithmetic’> ε
<factor’> <arithmeticExpr> <factor’’>
<factor’> <bool> <factor’’>
<factor’’> <relationalOp> <arithmeticExpr> <factor’’>
<factor’’> ε
<arithmeticExpr> BO <boolConjunctArithmetic> BC
<arithmeticExpr> <term1> <arithmeticExpr’>
<arithmeticExpr’> <op1> <term1> <arithmeticExpr’>
<arithmeticExpr’> ε
<term1> <op2> <term1’>
<term1’> <op1’><op2> <term1’>
<term1’> ε
<op1> PLUS
<op1> MINUS
<op1’> MUL
<op1’> DIV
<op2> BO <arithmeticExpr> BC
<op2> ID
<op2> NUM
<op2> RNUM
<logicalOp> AND
<logicalOp> OR
<relationalOp> LT
<relationalOp> LE
<relationalOp> GT
<relationalOp> GE
<relationalOp> EQ
<relationalOp> NE
<declareStmt> DECLARE <idList> COLON <dataType> SEMICOL
<condionalStmt> SWITCH BO ID BC START <caseStmt> <default> END 
<caseStmt> CASE <value> COLON <statements> BREAK SEMICOL <caseStmt’>
<caseStmt’> <caseStmt>
<caseStmt’> ε
<value> NUM
<value> TRUE
<value> FALSE
<default> DEFAULT COLON <statements> BREAK SEMICOL
<default> ε
<iterativeStmt> FOR BO ID IN NUM RANGEOP NUM BC START <statements> END
<iterativeStmt> WHILE BO <boolConjunctArithmetic> BC START <statements> END
<range> ID RANGEOP <range’>
<range> NUM RANGEOP <range’>
<range’> ID
<range’> NUM